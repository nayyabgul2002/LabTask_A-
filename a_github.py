# -*- coding: utf-8 -*-
"""A*Github.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14_e25aH5sgep47nQyQow23KpWK21S8xn
"""

import heapq
from queue import PriorityQueue

city_coords = {
    "Lahore": (31.5497, 74.3436),
    "Faisalabad": (31.4180, 73.0791),
    "Multan": (30.1575, 71.5249),
    "Karachi": (24.8607, 67.0011)
}

graph = {
    "Lahore": {"Faisalabad": 180 / 90},
    "Faisalabad": {"Lahore": 180 / 90, "Multan": 220 / 80},
    "Multan": {"Faisalabad": 220 / 80, "Karachi": 880 / 100},
    "Karachi": {"Multan": 880 / 100}
}

h = {
    "Lahore": 12.0,
    "Faisalabad": 10.5,
    "Multan": 8.5,
    "Karachi": 0.0
}

def a_star_search(start, goal):
    open_set = PriorityQueue()
    open_set.put((0, start))

    came_from = {}
    g_score = {city: float('inf') for city in graph}
    g_score[start] = 0

    f_score = {city: float('inf') for city in graph}
    f_score[start] = h[start]

    while not open_set.empty():
        _, current = open_set.get()

        if current == goal:
            path = []
            total_cost = 0
            while current in came_from:
                prev = came_from[current]
                path.append(current)
                total_cost += graph[prev][current]
                current = prev
            path.append(start)
            path.reverse()
            return path, total_cost

        for neighbor in graph[current]:
            tentative_g = g_score[current] + graph[current][neighbor]
            if tentative_g < g_score[neighbor]:
                came_from[neighbor] = current
                g_score[neighbor] = tentative_g
                f_score[neighbor] = tentative_g + h[neighbor]
                open_set.put((f_score[neighbor], neighbor))

    return None, None

path, cost = a_star_search("Lahore", "Karachi")

if path:
    print("Optimal path:", " -> ".join(path))
    print(f"Total estimated travel time: {cost:.2f} hours")
else:
    print("No path found.")